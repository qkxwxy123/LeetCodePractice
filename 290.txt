class Solution {
public:
    bool wordPattern(string pattern, string str) {
        vector<string>ss;
        string temp;
        for(int i = 0; i < str.size(); i++)
        {
            if(str[i] == ' ')
            {
                ss.push_back(temp);
                temp = "";
                continue;
            }
            else
                temp += str[i];
        }
        ss.push_back(temp);
        /*
        for(int i = 0; i < ss.size(); i++)
            cout << ss[i]<< ' ';
            */
        if(ss.size() != pattern.size())
            return false;
        unordered_map<char, string>mp;
        unordered_map<string, char>smp;
        int count = 0;
        for(int i = 0; i < pattern.size(); i++)
        {
            if(!mp.count(pattern[i]) && !smp.count(ss[count]))
            {
                mp.insert(make_pair(pattern[i], ss[count]));
                smp.insert(make_pair(ss[count], pattern[i]));
                count++;
            }
            else
            {
                if(mp[pattern[i]] == ss[count] && smp[ss[count]] == pattern[i])
                {
                    count++;
                    continue;
                }
                else
                    return false;
            }
        }
        return true;
    }
};